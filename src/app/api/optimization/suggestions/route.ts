import { NextRequest, NextResponse } from 'next/server';
import { TitleSuggestionRequest, OptimizationSuggestion } from '@/types/channel-optimization';

// Ê®°Êì¨Êï∏ÊìöÂ∫´
const suggestions: OptimizationSuggestion[] = [];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const videoId = searchParams.get('videoId');
    const type = searchParams.get('type');
    const status = searchParams.get('status');
    
    let filteredSuggestions = suggestions;
    
    if (videoId) {
      filteredSuggestions = filteredSuggestions.filter(s => s.videoId === videoId);
    }
    
    if (type) {
      filteredSuggestions = filteredSuggestions.filter(s => s.type === type);
    }
    
    if (status) {
      filteredSuggestions = filteredSuggestions.filter(s => s.status === status);
    }

    return NextResponse.json({
      success: true,
      suggestions: filteredSuggestions,
    });
  } catch (error) {
    console.error('Error fetching suggestions:', error);
    return NextResponse.json(
      { error: 'Failed to fetch suggestions' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const requestData: TitleSuggestionRequest = await request.json();
    
    console.log('üéØ Generating optimization suggestions for video:', requestData.videoId);
    console.log('üìä Request data:', {
      currentTitle: requestData.currentTitle,
      hasDescription: !!requestData.description,
      hasTranscript: !!requestData.transcript,
      targetKeywords: requestData.targetKeywords,
      externalTitlesCount: requestData.referenceContext.externalTitles.length,
      ownTopTitlesCount: requestData.referenceContext.ownTopTitles.length,
    });

    // Ê∫ñÂÇôÁôºÈÄÅÂà∞ n8n webhook ÁöÑÂ¢ûÂº∑Êï∏Êìö
    const enhancedWebhookPayload = {
      // ÂéüÊúâÁöÑÊï∏ÊìöÁµêÊßã
      currentTitle: requestData.currentTitle,
      description: requestData.description || '',
      transcript: requestData.transcript || '',
      specialInstructions: requestData.specialInstructions || '',
      
      // Êñ∞Â¢ûÁöÑÂÑ™Âåñ‰∏ä‰∏ãÊñá
      optimization: {
        videoId: requestData.videoId,
        targetKeywords: requestData.targetKeywords || [],
        referenceContext: {
          // ‰æÜËá™ YouTube Analytics database ÁöÑÊàêÂäüÊ®ôÈ°å
          externalSuccessfulTitles: requestData.referenceContext.externalTitles,
          
          // Áî®Êà∂Ëá™Â∑±È†ªÈÅìÁöÑÈ´òË°®ÁèæÊ®ôÈ°å
          ownTopPerformingTitles: requestData.referenceContext.ownTopTitles,
          
          // Ê∑∑ÂêàÂèÉËÄÉÊ®ôÈ°å (ÁµêÂêàÂ§ñÈÉ®ÂíåÂÖßÈÉ®)
          combinedReferenceTitles: [
            ...requestData.referenceContext.externalTitles,
            ...requestData.referenceContext.ownTopTitles
          ],
        },
        requestType: 'channel_optimization', // Ê®ôË≠òÈÄôÊòØ‰æÜËá™È†ªÈÅìÂÑ™ÂåñÂäüËÉΩ
        analysisDepth: 'enhanced', // Ë¶ÅÊ±ÇÊõ¥Ê∑±ÂÖ•ÁöÑÂàÜÊûê
      }
    };

    console.log('üöÄ Sending enhanced payload to n8n webhook:', {
      payloadSize: JSON.stringify(enhancedWebhookPayload).length,
      externalTitlesCount: enhancedWebhookPayload.optimization.referenceContext.externalSuccessfulTitles.length,
      ownTitlesCount: enhancedWebhookPayload.optimization.referenceContext.ownTopPerformingTitles.length,
      combinedTitlesCount: enhancedWebhookPayload.optimization.referenceContext.combinedReferenceTitles.length,
    });

    // Ë™øÁî® n8n webhook
    const n8nWebhookUrl = process.env.NEXT_PUBLIC_N8N_CREATE_TITLE_WEBHOOK_URL;
    if (!n8nWebhookUrl) {
      throw new Error('N8N webhook URL not configured');
    }

    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 600000); // 10 minutes timeout

    try {
      const response = await fetch(n8nWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Connection': 'keep-alive',
          'Keep-Alive': 'timeout=600, max=1000'
        },
        body: JSON.stringify(enhancedWebhookPayload),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`N8N webhook error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      console.log('üì® N8N webhook response:', result);

      // Ëß£Êûê n8n ÁöÑÂõûÊáâ‰∏¶ÂâµÂª∫Âª∫Ë≠∞
      const titleSuggestions = parseTitleSuggestionsFromN8N(result);
      
      // ÂâµÂª∫ÂÑ™ÂåñÂª∫Ë≠∞Ë®òÈåÑ
      const newSuggestions: OptimizationSuggestion[] = titleSuggestions.map((title, index) => ({
        id: generateId(),
        videoId: requestData.videoId,
        type: 'title' as const,
        currentValue: requestData.currentTitle,
        suggestedValue: title,
        reasoning: `AI-generated title suggestion based on ${requestData.referenceContext.externalTitles.length} successful external titles and ${requestData.referenceContext.ownTopTitles.length} own top-performing titles.`,
        referenceVideos: [], // ÈÄôË£°ÂèØ‰ª•Ê∑ªÂä†ÂèÉËÄÉÂΩ±ÁâáÁöÑ IDs
        confidence: 85 + Math.floor(Math.random() * 10), // 85-94% ‰ø°ÂøÉÂ∫¶
        status: 'pending' as const,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      }));

      // ‰øùÂ≠òÂà∞Êï∏ÊìöÂ∫´
      suggestions.push(...newSuggestions);

      return NextResponse.json({
        success: true,
        suggestions: newSuggestions,
        enhancedAnalysis: true,
        referenceContext: {
          externalTitlesUsed: requestData.referenceContext.externalTitles.length,
          ownTitlesUsed: requestData.referenceContext.ownTopTitles.length,
        },
      });

    } catch (webhookError) {
      clearTimeout(timeoutId);
      console.error('N8N webhook failed:', webhookError);
      
      // Â¶ÇÊûú webhook Â§±ÊïóÔºåËøîÂõûÂü∫ÊñºË¶èÂâáÁöÑÂª∫Ë≠∞
      const fallbackSuggestions = generateFallbackTitleSuggestions(requestData);
      
      suggestions.push(...fallbackSuggestions);

      return NextResponse.json({
        success: true,
        suggestions: fallbackSuggestions,
        enhancedAnalysis: false,
        fallbackUsed: true,
        error: 'Webhook failed, using fallback suggestions',
      });
    }

  } catch (error) {
    console.error('Error generating suggestions:', error);
    return NextResponse.json(
      { error: 'Failed to generate suggestions' },
      { status: 500 }
    );
  }
}

function parseTitleSuggestionsFromN8N(result: any): string[] {
  // Ëß£Êûê‰∏çÂêåÊ†ºÂºèÁöÑ n8n ÂõûÊáâ
  let recommendedTitles: string[] = [];
  
  if (Array.isArray(result) && result.length > 0 && typeof result[0] === 'string') {
    recommendedTitles = result;
  } else if (result.recommendedTitles && Array.isArray(result.recommendedTitles)) {
    recommendedTitles = result.recommendedTitles;
  } else if (Array.isArray(result) && result.length > 0 && result[0].message) {
    const content = result[0].message.content;
    if (content && content.recommendedTitles && Array.isArray(content.recommendedTitles)) {
      recommendedTitles = content.recommendedTitles;
    }
  }
  
  return recommendedTitles.filter(title => title && typeof title === 'string');
}

function generateFallbackTitleSuggestions(requestData: TitleSuggestionRequest): OptimizationSuggestion[] {
  // Âü∫ÊñºË¶èÂâáÁöÑÂÇôÁî®Âª∫Ë≠∞ÁîüÊàê
  const currentTitle = requestData.currentTitle;
  const keywords = requestData.targetKeywords || [];
  
  const variations = [
    `${currentTitle} - Complete Guide`,
    `How to ${currentTitle.toLowerCase()}`,
    `${currentTitle} Tutorial`,
    `${currentTitle} Tips & Tricks`,
    `${currentTitle} Explained`,
  ];

  return variations.map((title, index) => ({
    id: generateId(),
    videoId: requestData.videoId,
    type: 'title' as const,
    currentValue: currentTitle,
    suggestedValue: title,
    reasoning: 'Fallback suggestion based on title optimization patterns',
    referenceVideos: [],
    confidence: 60 + index * 5, // Èôç‰Ωé‰ø°ÂøÉÂ∫¶
    status: 'pending' as const,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  }));
}

function generateId(): string {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}